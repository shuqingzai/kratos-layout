// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: greeter-proto/greeter.proto

package greeter

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Page) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Page with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PageMultiError, or nil if none found.
func (m *Page) ValidateAll() error {
	return m.validate(true)
}

func (m *Page) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Num

	// no validation rules for Size

	// no validation rules for Total

	// no validation rules for Disable

	if len(errors) > 0 {
		return PageMultiError(errors)
	}

	return nil
}

// PageMultiError is an error wrapping multiple validation errors returned by
// Page.ValidateAll() if the designated constraints aren't met.
type PageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageMultiError) AllErrors() []error { return m }

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on IdsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdsRequestMultiError, or
// nil if none found.
func (m *IdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ids

	if len(errors) > 0 {
		return IdsRequestMultiError(errors)
	}

	return nil
}

// IdsRequestMultiError is an error wrapping multiple validation errors
// returned by IdsRequest.ValidateAll() if the designated constraints aren't met.
type IdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsRequestMultiError) AllErrors() []error { return m }

// IdsRequestValidationError is the validation error returned by
// IdsRequest.Validate if the designated constraints aren't met.
type IdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsRequestValidationError) ErrorName() string { return "IdsRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsRequestValidationError{}

// Validate checks the field values on GreeterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GreeterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GreeterReplyMultiError, or
// nil if none found.
func (m *GreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Age

	if len(errors) > 0 {
		return GreeterReplyMultiError(errors)
	}

	return nil
}

// GreeterReplyMultiError is an error wrapping multiple validation errors
// returned by GreeterReply.ValidateAll() if the designated constraints aren't met.
type GreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GreeterReplyMultiError) AllErrors() []error { return m }

// GreeterReplyValidationError is the validation error returned by
// GreeterReply.Validate if the designated constraints aren't met.
type GreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GreeterReplyValidationError) ErrorName() string { return "GreeterReplyValidationError" }

// Error satisfies the builtin error interface
func (e GreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GreeterReplyValidationError{}

// Validate checks the field values on CreateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGreeterRequestMultiError, or nil if none found.
func (m *CreateGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 50 {
		err := CreateGreeterRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAge() < 0 {
		err := CreateGreeterRequestValidationError{
			field:  "Age",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateGreeterRequestMultiError(errors)
	}

	return nil
}

// CreateGreeterRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGreeterRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGreeterRequestMultiError) AllErrors() []error { return m }

// CreateGreeterRequestValidationError is the validation error returned by
// CreateGreeterRequest.Validate if the designated constraints aren't met.
type CreateGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGreeterRequestValidationError) ErrorName() string {
	return "CreateGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGreeterRequestValidationError{}

// Validate checks the field values on GetGreeterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreeterRequestMultiError, or nil if none found.
func (m *GetGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGreeterRequestMultiError(errors)
	}

	return nil
}

// GetGreeterRequestMultiError is an error wrapping multiple validation errors
// returned by GetGreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreeterRequestMultiError) AllErrors() []error { return m }

// GetGreeterRequestValidationError is the validation error returned by
// GetGreeterRequest.Validate if the designated constraints aren't met.
type GetGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreeterRequestValidationError) ErrorName() string {
	return "GetGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreeterRequestValidationError{}

// Validate checks the field values on GetGreeterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreeterReplyMultiError, or nil if none found.
func (m *GetGreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Age

	if len(errors) > 0 {
		return GetGreeterReplyMultiError(errors)
	}

	return nil
}

// GetGreeterReplyMultiError is an error wrapping multiple validation errors
// returned by GetGreeterReply.ValidateAll() if the designated constraints
// aren't met.
type GetGreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreeterReplyMultiError) AllErrors() []error { return m }

// GetGreeterReplyValidationError is the validation error returned by
// GetGreeterReply.Validate if the designated constraints aren't met.
type GetGreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreeterReplyValidationError) ErrorName() string { return "GetGreeterReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreeterReplyValidationError{}

// Validate checks the field values on FindGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindGreeterRequestMultiError, or nil if none found.
func (m *FindGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindGreeterRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindGreeterRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindGreeterRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Age != nil {
		// no validation rules for Age
	}

	if len(errors) > 0 {
		return FindGreeterRequestMultiError(errors)
	}

	return nil
}

// FindGreeterRequestMultiError is an error wrapping multiple validation errors
// returned by FindGreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type FindGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindGreeterRequestMultiError) AllErrors() []error { return m }

// FindGreeterRequestValidationError is the validation error returned by
// FindGreeterRequest.Validate if the designated constraints aren't met.
type FindGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindGreeterRequestValidationError) ErrorName() string {
	return "FindGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindGreeterRequestValidationError{}

// Validate checks the field values on FindGreeterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindGreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindGreeterReplyMultiError, or nil if none found.
func (m *FindGreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FindGreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindGreeterReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindGreeterReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindGreeterReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindGreeterReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindGreeterReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindGreeterReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindGreeterReplyMultiError(errors)
	}

	return nil
}

// FindGreeterReplyMultiError is an error wrapping multiple validation errors
// returned by FindGreeterReply.ValidateAll() if the designated constraints
// aren't met.
type FindGreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindGreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindGreeterReplyMultiError) AllErrors() []error { return m }

// FindGreeterReplyValidationError is the validation error returned by
// FindGreeterReply.Validate if the designated constraints aren't met.
type FindGreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindGreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindGreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindGreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindGreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindGreeterReplyValidationError) ErrorName() string { return "FindGreeterReplyValidationError" }

// Error satisfies the builtin error interface
func (e FindGreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindGreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindGreeterReplyValidationError{}

// Validate checks the field values on UpdateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGreeterRequestMultiError, or nil if none found.
func (m *UpdateGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 50 {
			err := UpdateGreeterRequestValidationError{
				field:  "Name",
				reason: "value length must be between 2 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Age != nil {

		if m.GetAge() < 0 {
			err := UpdateGreeterRequestValidationError{
				field:  "Age",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateGreeterRequestMultiError(errors)
	}

	return nil
}

// UpdateGreeterRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGreeterRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGreeterRequestMultiError) AllErrors() []error { return m }

// UpdateGreeterRequestValidationError is the validation error returned by
// UpdateGreeterRequest.Validate if the designated constraints aren't met.
type UpdateGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGreeterRequestValidationError) ErrorName() string {
	return "UpdateGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGreeterRequestValidationError{}
